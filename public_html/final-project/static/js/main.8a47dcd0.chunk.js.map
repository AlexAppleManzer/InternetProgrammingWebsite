{"version":3,"sources":["CatFacts.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["CatFacts","props","state","error","isLoaded","items","axios","get","params","limit","then","res","console","log","data","setState","err","this","message","className","scope","map","item","index","key","fact","React","Component","About","App","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oUAGqBA,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,MAAO,IALQ,E,iFAQE,IAAD,OAClBC,IAAMC,IAAI,8BAA+B,CAACC,OAAQ,CAACC,MAAO,QACvDC,MACC,SAACC,GACCC,QAAQC,IAAIF,EAAIG,KAAKA,MACrB,EAAKC,SAAS,CACZX,UAAU,EACVC,MAAOM,EAAIG,KAAKA,UAMpB,SAACE,GACC,EAAKD,SAAS,CACZX,UAAU,EACVY,a,+BAMA,IAAD,EAC4BC,KAAKf,MAAhCC,EADD,EACCA,MAAOC,EADR,EACQA,SAAUC,EADlB,EACkBA,MACzB,OAAIF,EACK,uCAAaA,EAAMe,SAChBd,EAIR,yBAAKe,UAAU,aACb,qCACA,2BAAOA,UAAU,oBACf,+BACE,4BACE,wBAAIC,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,UAGJ,+BACGf,EAAMgB,KAAI,SAACC,EAAMC,GAAP,OACT,wBAAIC,IAAKD,GACP,wBAAIH,MAAM,OACPG,GAEH,4BACGD,EAAKG,aAnBb,+C,GApCyBC,IAAMC,WCAvB3B,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVkB,KAAM,MALS,E,iFAQE,IAAD,OAClBhB,IAAMC,IAAI,8BACPG,MACC,SAACC,GACCC,QAAQC,IAAIF,GACZ,EAAKI,SAAS,CACZX,UAAU,EACVkB,KAAMX,EAAIG,UAMd,SAACE,GACC,EAAKD,SAAS,CACZX,UAAU,EACVY,a,+BAMA,IAAD,EAC2BC,KAAKf,MAA/BC,EADD,EACCA,MAAOC,EADR,EACQA,SAAUkB,EADlB,EACkBA,KACzB,OAAInB,EACK,uCAAaA,EAAMe,SAChBd,EAIR,yBAAKe,UAAU,aACb,qDAEA,2CACiB,6BACVG,EAAKG,MAGZ,+DAXG,+C,GApCyBC,IAAMC,WCiD5C,SAASC,IACP,OAAO,qCAGMC,MA1Cf,WACE,OACE,kBAAC,IAAD,KACE,6BACE,yBAAKV,UAAU,+CACb,kBAAC,IAAD,CAAMW,GAAG,IAAIX,UAAU,gBAAvB,cACA,4BAAQA,UAAU,iBAAiBY,KAAK,SAASC,cAAY,WAAWC,cAAY,sBAAsBC,gBAAc,qBAAqBC,gBAAc,QAAQC,aAAW,qBAC5K,0BAAMjB,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BkB,GAAG,sBAC3C,kBAAC,IAAD,CAAMlB,UAAU,oBAAoBW,GAAG,KAAvC,QACA,kBAAC,IAAD,CAAMX,UAAU,oBAAoBW,GAAG,UAAvC,SACA,kBAAC,IAAD,CAAMX,UAAU,oBAAoBW,GAAG,UAAvC,WAMJ,yBAAKX,UAAU,yCACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOmB,KAAK,UACV,kBAACV,EAAD,OAEF,kBAAC,IAAD,CAAOU,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,YC7BMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,MAAK,SAAAyC,GACjCA,EAAaC,kB","file":"static/js/main.8a47dcd0.chunk.js","sourcesContent":["import React from 'react'\nimport axios from 'axios';\n\nexport default class CatFacts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n  componentDidMount() {\n    axios.get('https://catfact.ninja/facts', {params: {limit: \"10\"}})\n      .then(\n        (res) => {\n          console.log(res.data.data);\n          this.setState({\n            isLoaded: true,\n            items: res.data.data\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (err) => {\n          this.setState({\n            isLoaded: true,\n            err\n          });\n        }\n      )\n  }\n\n  render() {\n    const { error, isLoaded, items } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div className=\"card-body\">\n          <h2>Facts</h2>\n          <table className=\"table table-dark\">\n            <thead>\n              <tr>\n                <th scope=\"col\">#</th>\n                <th scope=\"col\">Fact</th>\n              </tr>\n            </thead>\n            <tbody>\n              {items.map((item, index) => (\n                <tr key={index}>\n                  <th scope=\"row\">\n                    {index}\n                  </th>\n                  <td>\n                    {item.fact}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      );\n    }\n  }\n}\n","import React from 'react'\nimport axios from 'axios';\n\nexport default class CatFacts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      item: null\n    };\n  }\n  componentDidMount() {\n    axios.get('https://catfact.ninja/fact')\n      .then(\n        (res) => {\n          console.log(res);\n          this.setState({\n            isLoaded: true,\n            item: res.data\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (err) => {\n          this.setState({\n            isLoaded: true,\n            err\n          });\n        }\n      )\n  }\n\n  render() {\n    const { error, isLoaded, item } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div className=\"card-body\">\n          <h2>Welcome to Cat Facts!</h2>\n        \n          <p>\n              Random Fact: <br></br>\n                {item.fact}\n          </p>\n\n          <button>Click Here to Unsubscribe!</button>\n        </div>\n      );\n    }\n  }\n}\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Link,\n  Route,\n  Switch,\n} from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nimport CatFacts from \"./CatFacts\";\nimport Home from \"./Home\"\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n          <Link to=\"/\" className=\"navbar-brand\">Cat Facts!</Link>\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n            <Link className=\"nav-item nav-link\" to=\"/\">Home</Link>\n            <Link className=\"nav-item nav-link\" to=\"/about\">About</Link>\n            <Link className=\"nav-item nav-link\" to=\"/facts\">Facts</Link>\n          </div>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <div className=\"card router-outlet text-white bg-dark\">\n          <Switch >\n            <Route path=\"/about\">\n              <About />\n            </Route>\n            <Route path=\"/facts\">\n              <CatFacts />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </div>\n\n      </div>\n    </Router>\n  );\n}\n\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}