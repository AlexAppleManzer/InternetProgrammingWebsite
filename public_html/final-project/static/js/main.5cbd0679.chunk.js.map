{"version":3,"sources":["CatFacts.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["CatFacts","props","state","error","isLoaded","items","axios","get","params","limit","then","res","console","log","data","setState","err","this","message","className","scope","map","item","index","key","fact","React","Component","notify","toast","position","bodyClassName","onClick","About","href","App","document","title","configure","basename","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","path","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5cbd0679.chunk.js","sourcesContent":["import React from 'react'\r\nimport axios from 'axios';\r\n\r\nexport default class CatFacts extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      items: []\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    axios.get('https://catfact.ninja/facts', {params: {limit: \"10\"}})\r\n      .then(\r\n        (res) => {\r\n          console.log(res.data.data);\r\n          this.setState({\r\n            isLoaded: true,\r\n            items: res.data.data\r\n          });\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (err) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            err\r\n          });\r\n        }\r\n      )\r\n  }\r\n\r\n  render() {\r\n    const { error, isLoaded, items } = this.state;\r\n    if (error) {\r\n      return <div>Error: {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n      return <div>Loading...</div>;\r\n    } else {\r\n      return (\r\n        <div className=\"card-body\">\r\n          <h2>Facts</h2>\r\n          <table className=\"table table-dark\">\r\n            <thead>\r\n              <tr>\r\n                <th scope=\"col\">#</th>\r\n                <th scope=\"col\">Fact</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {items.map((item, index) => (\r\n                <tr key={index}>\r\n                  <th scope=\"row\">\r\n                    {index}\r\n                  </th>\r\n                  <td>\r\n                    {item.fact}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import React from 'react'\r\nimport axios from 'axios';\r\nimport {toast} from 'react-toastify'\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './Home.css'\r\n\r\nexport default class CatFacts extends React.Component {\r\n  notify = () => toast(\"You are now unsub.... Just kidding you can never escape!\", {\r\n    position: \"bottom-center\",\r\n    className: 'black-background',\r\n    bodyClassName: \"grow-font-size\",\r\n  });\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isLoaded: false,\r\n      item: null\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    axios.get('https://catfact.ninja/fact')\r\n      .then(\r\n        (res) => {\r\n          console.log(res);\r\n          this.setState({\r\n            isLoaded: true,\r\n            item: res.data\r\n          });\r\n        },\r\n        // Note: it's important to handle errors here\r\n        // instead of a catch() block so that we don't swallow\r\n        // exceptions from actual bugs in components.\r\n        (err) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            err\r\n          });\r\n        }\r\n      )\r\n  }\r\n\r\n  render() {\r\n    const { error, isLoaded, item } = this.state;\r\n    if (error) {\r\n      return <div>Error: {error.message}</div>;\r\n    } else if (!isLoaded) {\r\n      return <div>Loading...</div>;\r\n    } else {\r\n      return (\r\n        <div className=\"card-body\">\r\n          <h2>Welcome to Cat Facts!</h2>\r\n        \r\n          <p>\r\n              Random Fact: <br></br>\r\n                {item.fact}\r\n          </p>\r\n\r\n          <button className=\"btn btn-danger\" onClick={this.notify}>Click Here to Unsubscribe!</button>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Link,\r\n  Route,\r\n  Switch,\r\n} from 'react-router-dom';\r\nimport {toast} from 'react-toastify';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './App.css';\r\n\r\nimport CatFacts from \"./CatFacts\";\r\nimport Home from \"./Home\"\r\n\r\nfunction App() {\r\n  document.title = \"Cat Facts Project\"\r\n\r\n  toast.configure();\r\n  return (\r\n    <Router basename=\"/~amanzer/final-project\">\r\n      <div>\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n          <Link to=\"/\" className=\"navbar-brand\">Cat Facts!</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n            <Link className=\"nav-item nav-link\" to=\"/\">Home</Link>\r\n            <Link className=\"nav-item nav-link\" to=\"/about\">About</Link>\r\n            <Link className=\"nav-item nav-link\" to=\"/facts\">Facts</Link>\r\n            <a href=\"./php/insertcomment.html\">Create A Comment</a>\r\n          </div>\r\n        </nav>\r\n\r\n        {/* A <Switch> looks through its children <Route>s and\r\n            renders the first one that matches the current URL. */}\r\n        <div className=\"card router-outlet text-white bg-dark\">\r\n          <Switch >\r\n            <Route path=\"/about\">\r\n              <About />\r\n            </Route>\r\n            <Route path=\"/facts\">\r\n              <CatFacts />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <Home />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\n\r\nfunction About() {\r\n  return (\r\n    <div className=\"card-body\">\r\n      <h2>About The Site</h2>\r\n      <p>This site uses information provided by the Cat facts API <a href=\"https://catfact.ninja\">Link Here</a></p>\r\n      <p>It was made using React and the source is <a href=\"https://github.com/AlexAppleManzer/InternetProgrammingWebsite\">Here</a></p>\r\n    </div>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}